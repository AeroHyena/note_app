/* 
This is the main script used in the app.
It contains any functions and logic that is used
to provide functionality to the app.


Database:
This script utilizes indexedDB to store
note contents into a database.
# notesDB = database for note contents.
*/

const dbName = "notesDB";


/* Manage a database for the notes on app launch */
// Open the notesDB database or create it if it doesn't exist
const request = window.indexedDB.open(dbName, 1); 


// Define behavior for new database creation
request.onupgradeneeded = (event) => {
    // Save the IDBDatabase interface
    const db = event.target.result;

    // Create an objectstore for the notes with an autogenerated unique note-id
    const objectStore = db.createObjectStore("notes", { autoIncrement: "note-id" });

    // Create an index to search notes by id.
    // We want to make sure that note IDs are unique.
    objectStore.createIndex("note-id", "note-id", { unique: true });

    // Use transaction oncomplete to make sure the objectStore creation is
    // finished before adding data into it.
    objectStore.transaction.oncomplete = (event) => {
        // Store values in the newly created objectStore.
        const noteObjectStore = db
        .transaction("notes", "readwrite")
        .objectStore("notes");
        noteData.forEach((note) => {
        noteObjectStore.add(note);
    });
  };

};


//  define success and error handlers for the request
request.onerror = (event) => {
    console.error("Error creating database link to notesDB: Check that you have enabled the webapp to use IndexedDB!");
    console.log(event);
};

request.onsuccess = (event) => {
    console.log("Database link created to notesDB");
    db_link = event.target.result;

    // Create a transaction to the notes object store
    // that allows for both reading and writing data
    const transaction = db.transaction(["notes"], "readwrite");

    // Handle success and error handlers for the transaction
    transaction.oncomplete = (event) => {
    console.log("All done!");
    };

    transaction.onerror = (event) => {
    console.log("error on DB dransaction")
    };

};
  





// Make a function that allows the user to edit the content of the applied area.
// This function is intended to be invoked via an onclick event listener on the desired areas.
function edit_contents(id) {
    let content;

    content = document.getElementById(id);
    console.log(content);
    content.contentEditable = true;
    content.focus();

    // Remove hover functionality from element
    document.getElementById(id).classList.remove("editable");
}


// Convert the html content of the note to json
// If a savefile for the specified note does not exist, create one
function convert_to_json() {
    let html = document.getElementById("viewport");
    let json = JSON.stringify(html); 
}